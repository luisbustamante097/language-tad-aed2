scopeName: 'source.tad'
name: 'TAD'
fileTypes: [ 'tad' ]
limitLineLength: false

patterns: [
    { include: '#comment' }
    { include: '#strings' }
    { include: '#constants' }
    { include: '#constants_aux' }
    { include: '#arrays' }
    {
        comment: 'Declaraciones de TADs auxiliares'
        match: '((?:\w*TAD\*?))(\ .*?\ )(es)(\ .*?(?=(\ |\n|\<|\\(|\{)))'
        captures:
            1: name: 'markup.bold.tad'              # "TAD"
            2: name: 'variable.other.tad'           # Nombre de TAD
            3: name: 'markup.bold.tad'              # "es"
            4: name: 'storage.modifier.tad'         # Tipo de TAD
    }
    {
        comment: 'Highligting para Tupla<...> en declaraciones'
        name: 'meta.angle-brackets'
        begin: '\<|\\('
        end: '\>|\\)'
        beginCaptures:
            0: name: 'punctuation.section.parens.begin.tad'
        endCaptures:
            0: name: 'punctuation.section.parens.end.tad'
        patterns:[{
            match: '[A-Z].*?(\ |(?=\\)))'
            name: 'storage.modifier.tad'    # Palabra con mayuscula en la 1er letra
            }]
    }
    {
        comment: 'Declaracion de TAD principal'
        match: '((?:\w*TAD\*?))(\ .*?\\((.*?(?=\\))).*?\\)|\ .*?\n)'
        captures:
            1: name: 'markup.bold.tad'          # "TAD"
            2: name: 'variable.other.tad'       # Nombre de TAD
            3: name: 'storage.modifier.tad'     # (Parametro formal)
    }
    {
        comment: 'Seccion Extiende del header'
        match: '(?i)(\w*(EXTIENDE)(\ |\:|\t|\n))(\ .*?\\((.*?(?=\\))).*?\\))'
        captures:
            1: name: 'markup.bold.tad'          # "EXTIENDE"
            4: name: 'variable.other.tad'       # Nombre de TAD
            5: name: 'storage.modifier.tad'     # (Parametro formal)
    }
    {
        comment: 'Palabras clave de los TADS'
        name: 'markup.bold.tad'
        match: '(?i)(\w*(?:EXPORTA|IMPORTA|par[a,á]metros formales|g[e,é]neros|GENERADORES|Observadores B[a,á]sicos|OBSERVADORES|Otras Operaciones|Otras Op|OtrasOp)(\ |\:|\t|\n))'
    }
    {
        comment: 'Palabras clave de los TADS (Extra)'
        name: 'markup.bold.tad'
        match: '((\t|\n)(?:|USA|usa|Usa|GEN|gen|Gen|OBS|obs|Obs)\:)'
    }
    {
        comment: 'Seccion de Igualdad observacional'
        begin: '(?i)(\w*(?:Igualdad Observacional|IgObs|Ig Obs)(\ |\:))'
        # end: '(\\)\n)|(\n\n)'
        end: '((\;))|(?i)(\w*(?=EXTIENDE|EXPORTA|IMPORTA|g[e,é]neros|GENERADORES|Observadores B[a,á]sicos|OBSERVADORES|USA|usa|Usa|GEN|gen|Gen|OBS|obs|Obs))'  # El simbolo ";" permite que no haya conflictos con los colores
        beginCaptures:
            0: name: 'markup.bold.tad'
        endCaptures:
            # 0: name: 'punctuation.section.parens.end.tad'
            2: name: 'comment.line.tad.tad' #solo para ";"
        patterns:[
            { include: '#comment' }
            { include: '#functions' }
            { include: '#strings' }
            { include: '#constants' }
            { include: '#constants_aux' }
            { include: '#arrays' }
            { include: '#equal_obs_symbol' }
            { include: '#iff_symbol' }
            { include: '#logic_symbols' }
            # { include: '#functions_symbols' }
        ]
    }
    {
        comment: 'Parte de Axiomas'
        begin: '(?i)\w*AXIOMAS(\ |\:|\t|\n)'
        beginCaptures:
            0: name: 'markup.bold.tad'
        end: 'Fin\ TAD'
        endCaptures:
            0: name: 'markup.bold.tad'
        patterns:[
            {
            name: 'string.quoted.double.tad'
            match: '\".*?\"'
            }
            { include: '#comment' }
            { include: '#conditionals' }
            { include: '#strings' }
            { include: '#logic_symbols' }
            { include: '#arrays' }
            { include: '#functions' }
            { include: '#constants' }
            { include: '#constants_aux' }
            { include: '#equal_symbol' }
            # { include: '#functions_symbols' }
            { include: '#tupla_element' }
            # Agregadas para declaracion ad hoc en Axiomas
            { include: '#function_name_declaration' }
            { include: '#restrictions_brackets' }
        ]
    }
    { include: '#function_name_declaration' }
    { include: '#restrictions_brackets' }
]

repository:
    conditionals:{
        comment: 'Palabras clave del tipo Bool'
        name: 'keyword.control.conditional.tad'
        match: '(?i)((\t|\ |\n)(IF|FI|ELSE|ELIF|THEN)(\t|\ |\n))'
    }
    comment:{
        comment: 'Comentario del codigo'
        name: 'comment.line.tad'
        match: '//.*$'
    }
    strings:{
        comment: 'Strings (palabras entre comillas)'
        name: 'string.quoted.double.tad'
        match: '\".*?\"'
    }
    functions:{
        comment: 'Highligting de nombres de funciones varias'
        match: '(?:\\(|\ |\t|\\+|\-|)([A-zÀ-ú0-9\_\?\#\ñ\Ø\β\π\₀\₁\₂\₃\₄\₅\₆\₇\₈\₉]+?)(?=(\\(|\ \\())'
        captures:
            1: name: 'entity.name.function.tad'
    }
    functions_symbols:{ # Cambia colores de simbolos pero esta desactivado (No me parecio tan lindo pintarlos)
        comment: 'Simbolos de funciones de los TADs basicos'
        # name: 'constant.character.escape.tad'
        name: 'entity.name.tad'
        match: '(\•|\◦|\\+|\\-|\β|\π|\≤|\≥|\&|\⊂|\⊆|\∈|\∩|\∪|\←)'
    }
    logic_symbols:{
        comment: 'Simbolos de funciones condicionales'
        name: 'keyword.control.conditional.tad'
        match: '(\⇒|\=\>|\→)L|(\∨L|\∧L|\∨|\∧|\¬|((\∀|\∃|\∄).*?:)|\∀|\∃|\∄|\⇒|\=\>|\→|\⇐|\<\=)'
    }
    constants:{
        comment: 'Constantes'
        name: 'constant.language.tad'
        match: '(?i)(\\b(true|false|none|\Ø|nil|[0-9]+?)\\b)'
    }
    constants_aux:{
        comment: 'Constante <>'
        name: 'constant.language.tad'
        match: '\<\>'
    }
    arrays:{
        comment: 'Arrays'
        begin: '\\['
        end: '\\]'
        beginCaptures:
            0: name: 'punctuation.section.brackets.begin.tad'
        endCaptures:
            0: name: 'punctuation.section.brackets.end.tad'
        patterns:[
            {
            match: '^([0-9]+?)(?=\\])'
            name: 'constant.numeric.tad'
            }
            {
                comment: 'es necesario cuando hay una funcion adentro'
                name: 'keyword.control.conditional.tad'
                match: '\\['
            }
            { include: '#conditionals' }
            { include: '#strings' }
            { include: '#logic_symbols' }
            { include: '#functions' }
            { include: '#constants' }
            { include: '#constants_aux' }
            { include: '#functions_symbols' }
        ]
    }
    cross_symbol:{
        comment: 'Highligting para signo "x"'
        name: 'variable.language.tad'
        match: '(?:\ |\t)(?:x|\×)(?:\ |\t)'
    }
    right_arrow_symbol:{
        comment: 'Highligting para signo "->"'
        name: 'variable.language.tad'
        match: '((?:\-\>|\↦))'
    }
    equal_symbol:{
        comment: 'Highligting para signo "="'
        match: '(\ |\t|\n)(\=|\≡|\≠)(?=(\ |\t|\n))'
        name: 'variable.language.tad'
    }
    iff_symbol:{
        comment: 'Highligting para signo "<=>"'
        name: 'variable.language.tad'
        match: '(?:\↔|\<\=\>|\<\\-\>|\⇔|\⇐\⇒)'
    }
    equal_obs_symbol:{
        comment: 'Highligting para signo "=obs"'
        match: '(\ |\t)(\=obs)(?=(\ |\t))'
        name: 'variable.language.tad'
    }
    tupla_element:{
        comment: 'Atributos para los tipo Tupla'
        match: '(?:\\..*?)([a-z]+)'
        captures:
            1: name: 'variable.language.tad'
    }
    function_name_declaration:{
        comment: "Aridad de Funciones (Nombre de funcion)"
        begin: '(^(?:\t\t))(?!\/\/)([A-zÀ-ú0-9\_\?\#\ñ\Ø\\+\•\·\\-\≤\ ]+\:)'
        beginCaptures:
            0: name: 'entity.name.function.tad'
        end: '(?=\{)|(\n)'
        patterns:[
            { include: '#cross_symbol' }
            { include: '#right_arrow_symbol' }
            
        ]
    }
    restrictions_brackets:{
        comment: "Llaves para restricciones"
        begin: '\{'
        beginCaptures:
            0: name: 'punctuation.section.parens.begin.tad'
            0: name: 'keyword.control.conditional.tad'
        end: '\}\n|(?=\/\/)'
        endCaptures:
            0: name: 'punctuation.section.parens.end.tad'
            0: name: 'keyword.control.conditional.tad'
        patterns:[
            { include: '#comment' }
            { include: '#constants' }
            { include: '#strings' }
            { include: '#constants' }
            { include: '#constants_aux' }
            { include: '#arrays' }
            { include: '#functions' }
            { include: '#equal_symbol' }
            { include: '#iff_symbol' }
            { include: '#logic_symbols' }
            { include: '#tupla_element' }
            # { include: '#functions_symbols' }
            {
                comment: 'Llave si hay comentario'
                name: 'keyword.control.conditional.tad'
                match: '\}(.*?)(?=\/\/)'
            }
        ]
    }
